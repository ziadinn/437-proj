diff --git a/diff.txt b/diff.txt
new file mode 100644
index 0000000..6120bc8
--- /dev/null
+++ b/diff.txt
@@ -0,0 +1,1149 @@
+diff --git a/package-lock.json b/package-lock.json
+index adc1634..109138c 100644
+--- a/package-lock.json
++++ b/package-lock.json
+@@ -8,6 +8,7 @@
+       "name": "437-project-vite-app",
+       "version": "0.0.0",
+       "dependencies": {
++        "@tanstack/react-query": "^5.80.7",
+         "@types/react-router-dom": "^5.3.3",
+         "react": "^19.1.0",
+         "react-dom": "^19.1.0",
+@@ -1256,6 +1257,30 @@
+         "win32"
+       ]
+     },
++    "node_modules/@tanstack/query-core": {
++      "version": "5.80.7",
++      "resolved": "https://registry.npmjs.org/@tanstack/query-core/-/query-core-5.80.7.tgz",
++      "integrity": "sha512-s09l5zeUKC8q7DCCCIkVSns8zZrK4ZDT6ryEjxNBFi68G4z2EBobBS7rdOY3r6W1WbUDpc1fe5oY+YO/+2UVUg==",
++      "funding": {
++        "type": "github",
++        "url": "https://github.com/sponsors/tannerlinsley"
++      }
++    },
++    "node_modules/@tanstack/react-query": {
++      "version": "5.80.7",
++      "resolved": "https://registry.npmjs.org/@tanstack/react-query/-/react-query-5.80.7.tgz",
++      "integrity": "sha512-u2F0VK6+anItoEvB3+rfvTO9GEh2vb00Je05OwlUe/A0lkJBgW1HckiY3f9YZa+jx6IOe4dHPh10dyp9aY3iRQ==",
++      "dependencies": {
++        "@tanstack/query-core": "5.80.7"
++      },
++      "funding": {
++        "type": "github",
++        "url": "https://github.com/sponsors/tannerlinsley"
++      },
++      "peerDependencies": {
++        "react": "^18 || ^19"
++      }
++    },
+     "node_modules/@types/babel__core": {
+       "version": "7.20.5",
+       "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
+diff --git a/package.json b/package.json
+index fe9e7f3..493a5fc 100644
+--- a/package.json
++++ b/package.json
+@@ -10,6 +10,7 @@
+     "preview": "vite preview"
+   },
+   "dependencies": {
++    "@tanstack/react-query": "^5.80.7",
+     "@types/react-router-dom": "^5.3.3",
+     "react": "^19.1.0",
+     "react-dom": "^19.1.0",
+diff --git a/src/App.tsx b/src/App.tsx
+index 76b5b2f..d87d33e 100644
+--- a/src/App.tsx
++++ b/src/App.tsx
+@@ -4,7 +4,6 @@ import { Home, Profile, Post, Settings, EditPost, Login, Register, Dashboard } f
+ import { PostProvider } from './contexts/PostContext';
+ import { ProfileProvider, useProfileContext } from './contexts/ProfileContext';
+ import { AuthProvider } from './contexts/AuthContext';
+-import { PostsProvider } from './contexts/PostsContext';
+ import { ProtectedRoute } from './components/ProtectedRoute';
+ import './style.css';
+ 
+@@ -18,41 +17,39 @@ function AppContent() {
+ 
+   return (
+     <PostProvider>
+-      <PostsProvider>
+-        <Router>
+-          <Routes>
+-            <Route path="/" element={<Home />} />
+-            <Route path="/login" element={<Login />} />
+-            <Route path="/register" element={<Register />} />
+-            <Route path="/dashboard" element={
+-              <ProtectedRoute>
+-                <Dashboard />
+-              </ProtectedRoute>
+-            } />
+-            <Route path="/profile" element={
+-              <ProtectedRoute>
+-                <Profile />
+-              </ProtectedRoute>
+-            } />
+-            <Route path="/post/:id" element={<Post />} />
+-            <Route path="/settings" element={
+-              <ProtectedRoute>
+-                <Settings />
+-              </ProtectedRoute>
+-            } />
+-            <Route path="/edit-post" element={
+-              <ProtectedRoute>
+-                <EditPost />
+-              </ProtectedRoute>
+-            } />
+-            <Route path="/edit-post/:postId" element={
+-              <ProtectedRoute>
+-                <EditPost />
+-              </ProtectedRoute>
+-            } />
+-          </Routes>
+-        </Router>
+-      </PostsProvider>
++      <Router>
++        <Routes>
++          <Route path="/" element={<Home />} />
++          <Route path="/login" element={<Login />} />
++          <Route path="/register" element={<Register />} />
++          <Route path="/dashboard" element={
++            <ProtectedRoute>
++              <Dashboard />
++            </ProtectedRoute>
++          } />
++          <Route path="/profile" element={
++            <ProtectedRoute>
++              <Profile />
++            </ProtectedRoute>
++          } />
++          <Route path="/post/:id" element={<Post />} />
++          <Route path="/settings" element={
++            <ProtectedRoute>
++              <Settings />
++            </ProtectedRoute>
++          } />
++          <Route path="/edit-post" element={
++            <ProtectedRoute>
++              <EditPost />
++            </ProtectedRoute>
++          } />
++          <Route path="/edit-post/:postId" element={
++            <ProtectedRoute>
++              <EditPost />
++            </ProtectedRoute>
++          } />
++        </Routes>
++      </Router>
+     </PostProvider>
+   );
+ }
+diff --git a/src/components/PostCard.tsx b/src/components/PostCard.tsx
+new file mode 100644
+index 0000000..14c145e
+--- /dev/null
++++ b/src/components/PostCard.tsx
+@@ -0,0 +1,86 @@
++import { Link } from 'react-router-dom'
++import type { Post } from '../types'
++
++interface PostCardProps {
++  post: Post
++}
++
++const PostCard: React.FC<PostCardProps> = ({ post }) => {
++  const formatDate = (dateString: string) => {
++    const date = new Date(dateString)
++    return date.toLocaleDateString('en-US', {
++      year: 'numeric',
++      month: 'long',
++      day: 'numeric'
++    })
++  }
++
++  const getExcerpt = (content: string, maxLength: number = 150) => {
++    if (content.length <= maxLength) return content
++    return content.substring(0, maxLength).trim() + '...'
++  }
++
++  return (
++    <article className="post-summary">
++      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>
++        <span style={{ 
++          fontSize: '0.8rem',
++          padding: '2px 6px',
++          backgroundColor: post.published ? '#28a745' : '#ffc107',
++          color: post.published ? 'white' : '#000',
++          borderRadius: '3px'
++        }}>
++          {post.published ? 'Published' : 'Draft'}
++        </span>
++        <span style={{ fontSize: '0.8rem', color: 'var(--text-muted-color)' }}>
++          {formatDate(post.updatedAt)}
++        </span>
++      </div>
++      
++      <h3 style={{ marginBottom: '0.5rem' }}>
++        <Link 
++          to={`/posts/${post._id}`}
++          className="text-accent text-decoration-none"
++        >
++          {post.title}
++        </Link>
++      </h3>
++      
++      <p style={{ color: 'var(--text-muted-color)', fontSize: '0.9rem', marginBottom: '1rem' }}>
++        {getExcerpt(post.content)}
++      </p>
++      
++      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
++        <div className="d-flex align-items-center">
++          <div style={{
++            width: '2rem',
++            height: '2rem',
++            backgroundColor: 'var(--primary-accent-color)',
++            borderRadius: '50%',
++            display: 'flex',
++            alignItems: 'center',
++            justifyContent: 'center',
++            color: 'var(--button-text-color)',
++            fontSize: '0.9rem',
++            fontWeight: 'bold'
++          }}>
++            {post.author.charAt(0).toUpperCase()}
++          </div>
++          <span style={{ marginLeft: '0.5rem', fontSize: '0.9rem', color: 'var(--text-color)' }}>
++            {post.author}
++          </span>
++        </div>
++        
++        <Link 
++          to={`/posts/${post._id}`}
++          className="text-accent text-decoration-none"
++          style={{ fontSize: '0.9rem', fontWeight: '500' }}
++        >
++          Read more â†’
++        </Link>
++      </div>
++    </article>
++  )
++}
++
++export default PostCard 
+\ No newline at end of file
+diff --git a/src/hooks/usePosts.ts b/src/hooks/usePosts.ts
+new file mode 100644
+index 0000000..01b3798
+--- /dev/null
++++ b/src/hooks/usePosts.ts
+@@ -0,0 +1,128 @@
++import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
++import { useNavigate } from 'react-router-dom'
++import * as postsApi from '../services/postsApi'
++import type { CreatePostRequest, UpdatePostRequest } from '../types'
++
++// Query keys
++export const postKeys = {
++  all: ['posts'] as const,
++  lists: () => [...postKeys.all, 'list'] as const,
++  list: (filters: string) => [...postKeys.lists(), { filters }] as const,
++  details: () => [...postKeys.all, 'detail'] as const,
++  detail: (id: string) => [...postKeys.details(), id] as const,
++  userPosts: (username: string) => [...postKeys.all, 'user', username] as const,
++}
++
++// Get all posts
++export const usePosts = (page: number = 1, limit: number = 10) => {
++  return useQuery({
++    queryKey: postKeys.list(`page-${page}-limit-${limit}`),
++    queryFn: () => postsApi.fetchPosts(page, limit),
++    staleTime: 2 * 60 * 1000, // 2 minutes
++  })
++}
++
++// Get posts by user (public posts only)
++export const usePostsByUser = (username: string) => {
++  return useQuery({
++    queryKey: postKeys.userPosts(username),
++    queryFn: () => postsApi.fetchPostsByUser(username),
++    enabled: !!username, // Only run if username exists
++    staleTime: 1 * 60 * 1000, // 1 minute
++  })
++}
++
++// Get all posts by current authenticated user (including drafts)
++export const useMyPosts = () => {
++  return useQuery({
++    queryKey: [...postKeys.all, 'my'] as const,
++    queryFn: () => postsApi.fetchMyPosts(),
++    staleTime: 30 * 1000, // 30 seconds (more frequent refresh for user's own posts)
++  })
++}
++
++// Get single post
++export const usePost = (postId: string) => {
++  return useQuery({
++    queryKey: postKeys.detail(postId),
++    queryFn: () => postsApi.fetchPost(postId),
++    enabled: !!postId, // Only run if postId exists
++    retry: 1, // Only retry once for 404s
++  })
++}
++
++// Create post mutation
++export const useCreatePost = () => {
++  const queryClient = useQueryClient()
++  const navigate = useNavigate()
++
++  return useMutation({
++    mutationFn: (postData: CreatePostRequest) => postsApi.createPost(postData),
++    onSuccess: (newPost) => {
++      // Invalidate posts lists to refetch them
++      queryClient.invalidateQueries({ queryKey: postKeys.lists() })
++      queryClient.invalidateQueries({ queryKey: postKeys.userPosts(newPost.author) })
++      queryClient.invalidateQueries({ queryKey: [...postKeys.all, 'my'] })
++      
++      // Add the new post to the cache
++      queryClient.setQueryData(postKeys.detail(newPost._id!), newPost)
++      
++      // Navigate to dashboard
++      navigate('/dashboard')
++    },
++    onError: (error) => {
++      console.error('Error creating post:', error)
++    }
++  })
++}
++
++// Update post mutation
++export const useUpdatePost = () => {
++  const queryClient = useQueryClient()
++  const navigate = useNavigate()
++
++  return useMutation({
++    mutationFn: ({ postId, postData }: { postId: string, postData: UpdatePostRequest }) => 
++      postsApi.updatePost({ postId, postData }),
++    onSuccess: (updatedPost) => {
++      // Update the specific post in cache
++      queryClient.setQueryData(postKeys.detail(updatedPost._id!), updatedPost)
++      
++      // Invalidate lists to refetch them
++      queryClient.invalidateQueries({ queryKey: postKeys.lists() })
++      queryClient.invalidateQueries({ queryKey: postKeys.userPosts(updatedPost.author) })
++      queryClient.invalidateQueries({ queryKey: [...postKeys.all, 'my'] })
++      
++      // Navigate to dashboard
++      navigate('/dashboard')
++    },
++    onError: (error) => {
++      console.error('Error updating post:', error)
++    }
++  })
++}
++
++// Delete post mutation
++export const useDeletePost = () => {
++  const queryClient = useQueryClient()
++  const navigate = useNavigate()
++
++  return useMutation({
++    mutationFn: (postId: string) => postsApi.deletePost(postId),
++    onSuccess: (_, postId) => {
++      // Remove the post from cache
++      queryClient.removeQueries({ queryKey: postKeys.detail(postId) })
++      
++      // Invalidate lists to refetch them
++      queryClient.invalidateQueries({ queryKey: postKeys.lists() })
++      queryClient.invalidateQueries({ queryKey: postKeys.all })
++      queryClient.invalidateQueries({ queryKey: [...postKeys.all, 'my'] })
++      
++      // Navigate to dashboard
++      navigate('/dashboard')
++    },
++    onError: (error) => {
++      console.error('Error deleting post:', error)
++    }
++  })
++} 
+\ No newline at end of file
+diff --git a/src/main.tsx b/src/main.tsx
+index 4aff025..b99f368 100644
+--- a/src/main.tsx
++++ b/src/main.tsx
+@@ -1,9 +1,23 @@
+ import { StrictMode } from 'react'
+ import { createRoot } from 'react-dom/client'
++import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
++import './index.css'
+ import App from './App.tsx'
+ 
++// Create a client
++const queryClient = new QueryClient({
++  defaultOptions: {
++    queries: {
++      staleTime: 5 * 60 * 1000, // 5 minutes
++      gcTime: 10 * 60 * 1000, // 10 minutes (was cacheTime)
++    },
++  },
++})
++
+ createRoot(document.getElementById('root')!).render(
+   <StrictMode>
+-    <App />
++    <QueryClientProvider client={queryClient}>
++      <App />
++    </QueryClientProvider>
+   </StrictMode>,
+ )
+diff --git a/src/pages/Dashboard.tsx b/src/pages/Dashboard.tsx
+index deb2a84..05e25f8 100644
+--- a/src/pages/Dashboard.tsx
++++ b/src/pages/Dashboard.tsx
+@@ -1,28 +1,13 @@
+-import React, { useEffect } from 'react';
++import React from 'react';
+ import { Link } from 'react-router-dom';
+ import { Layout } from '../components/Layout';
+ import { NoPostsMessage } from '../components/NoPostsMessage';
+-import { usePostsContext } from '../contexts/PostsContext';
++import { useMyPosts } from '../hooks/usePosts';
+ import { useAuth } from '../contexts/AuthContext';
+ 
+ export const Dashboard: React.FC = () => {
+-  const { posts, loading, error, getPostsByUser, clearError } = usePostsContext();
+   const { user, logout } = useAuth();
+-
+-  // Load user's posts when component mounts
+-  useEffect(() => {
+-    if (user?.username) {
+-      const loadUserPosts = async () => {
+-        await getPostsByUser(user.username);
+-      };
+-      loadUserPosts();
+-    }
+-  }, [user?.username, getPostsByUser]);
+-
+-  // Clear errors when component mounts
+-  useEffect(() => {
+-    clearError();
+-  }, [clearError]);
++  const { data: posts = [], isLoading: loading, error } = useMyPosts();
+ 
+   const handleLogout = () => {
+     logout();
+@@ -98,7 +83,7 @@ export const Dashboard: React.FC = () => {
+               borderRadius: '4px', 
+               marginBottom: '1rem' 
+             }}>
+-              Error loading posts: {error}
++              Error loading posts: {error.message}
+             </div>
+           )}
+           
+@@ -144,7 +129,7 @@ export const Dashboard: React.FC = () => {
+                     </div>
+                   </div>
+                   <p style={{ color: 'var(--text-muted-color)', fontSize: '0.9rem', marginBottom: '0.5rem' }}>
+-                    {getPostExcerpt(post.content, post.description)}
++                    {getPostExcerpt(post.content)}
+                   </p>
+                   <div style={{ 
+                     display: 'flex', 
+diff --git a/src/pages/EditPost.tsx b/src/pages/EditPost.tsx
+index 32bb4da..e03bf96 100644
+--- a/src/pages/EditPost.tsx
++++ b/src/pages/EditPost.tsx
+@@ -1,7 +1,7 @@
+ import React, { useState, useEffect } from 'react';
+ import { Link, useNavigate, useParams } from 'react-router-dom';
+ import { Layout } from '../components/Layout';
+-import { usePostsContext } from '../contexts/PostsContext';
++import { usePost, useCreatePost, useUpdatePost } from '../hooks/usePosts';
+ 
+ export const EditPost: React.FC = () => {
+   const [title, setTitle] = useState('');
+@@ -10,38 +10,35 @@ export const EditPost: React.FC = () => {
+   const [published, setPublished] = useState(true);
+   const [titleTouched, setTitleTouched] = useState(false);
+   const [contentTouched, setContentTouched] = useState(false);
+-  const [isLoading, setIsLoading] = useState(false);
+   const [saveError, setSaveError] = useState<string | null>(null);
+   
+   const navigate = useNavigate();
+   const { postId } = useParams<{ postId: string }>();
+-  const { createPost, updatePost, getPost, loading, error, clearError } = usePostsContext();
++  
++  // React Query hooks
++  const { data: post, isLoading: postLoading, error: postError } = usePost(postId || '');
++  const { mutate: createPost, isPending: isCreating, error: createError } = useCreatePost();
++  const { mutate: updatePost, isPending: isUpdating, error: updateError } = useUpdatePost();
+ 
+   const isEditMode = Boolean(postId);
++  const isLoading = isCreating || isUpdating;
+ 
+   // Load post data if editing
+   useEffect(() => {
+-    if (isEditMode && postId) {
+-      const loadPost = async () => {
+-        const post = await getPost(postId);
+-        if (post) {
+-          setTitle(post.title);
+-          setDescription(post.description || '');
+-          setContent(post.content);
+-          setPublished(post.published);
+-        } else {
+-          navigate('/dashboard');
+-        }
+-      };
+-      loadPost();
++    if (isEditMode && post) {
++      setTitle(post.title);
++      setDescription(post.description || '');
++      setContent(post.content);
++      setPublished(post.published);
+     }
+-  }, [isEditMode, postId, getPost, navigate]);
++  }, [isEditMode, post]);
+ 
+-  // Clear errors when component mounts
++  // Handle navigation if post doesn't exist
+   useEffect(() => {
+-    clearError();
+-    setSaveError(null);
+-  }, [clearError]);
++    if (isEditMode && postError && !postLoading) {
++      navigate('/dashboard');
++    }
++  }, [isEditMode, postError, postLoading, navigate]);
+ 
+   const headerNav = (
+     <Link to="/dashboard" className="text-accent text-decoration-none">Dashboard</Link>
+@@ -72,33 +69,25 @@ export const EditPost: React.FC = () => {
+       return;
+     }
+ 
+-    setIsLoading(true);
++    const postData = {
++      title: title.trim(),
++      description: description.trim() || undefined,
++      content: content.trim(),
++      published
++    };
+ 
+-    try {
+-      const postData = {
+-        title: title.trim(),
+-        description: description.trim() || undefined,
+-        content: content.trim(),
+-        published
+-      };
+-
+-      let result;
+-      if (isEditMode && postId) {
+-        result = await updatePost(postId, postData);
+-      } else {
+-        result = await createPost(postData);
+-      }
+-
+-      if (result) {
+-        // Navigate to dashboard after successful save
+-        navigate('/dashboard');
+-      } else {
+-        setSaveError(error || 'Failed to save post');
+-      }
+-    } catch {
+-      setSaveError('An unexpected error occurred');
+-    } finally {
+-      setIsLoading(false);
++    if (isEditMode && postId) {
++      updatePost({ postId, postData }, {
++        onError: (error) => {
++          setSaveError(error.message || 'Failed to update post');
++        }
++      });
++    } else {
++      createPost(postData, {
++        onError: (error) => {
++          setSaveError(error.message || 'Failed to create post');
++        }
++      });
+     }
+   };
+ 
+@@ -110,40 +99,46 @@ export const EditPost: React.FC = () => {
+       return;
+     }
+ 
+-    setIsLoading(true);
+-
+-    try {
+-      const postData = {
+-        title: title.trim(),
+-        description: description.trim() || undefined,
+-        content: content.trim(),
+-        published: false
+-      };
+-
+-      let result;
+-      if (isEditMode && postId) {
+-        result = await updatePost(postId, { ...postData, published: false });
+-      } else {
+-        result = await createPost({ ...postData, published: false });
+-      }
++    const postData = {
++      title: title.trim(),
++      description: description.trim() || undefined,
++      content: content.trim(),
++      published: false
++    };
+ 
+-      if (result) {
+-        navigate('/dashboard');
+-      } else {
+-        setSaveError(error || 'Failed to save draft');
+-      }
+-    } catch {
+-      setSaveError('An unexpected error occurred');
+-    } finally {
+-      setIsLoading(false);
++    if (isEditMode && postId) {
++      updatePost({ postId, postData }, {
++        onError: (error) => {
++          setSaveError(error.message || 'Failed to save draft');
++        }
++      });
++    } else {
++      createPost(postData, {
++        onError: (error) => {
++          setSaveError(error.message || 'Failed to save draft');
++        }
++      });
+     }
+   };
+ 
++  // Show loading state while fetching post in edit mode
++  if (isEditMode && postLoading) {
++    return (
++      <Layout headerNav={headerNav}>
++        <div style={{ textAlign: 'center', padding: '2rem' }}>
++          <p style={{ color: 'var(--text-muted-color)' }}>Loading post...</p>
++        </div>
++      </Layout>
++    );
++  }
++
++  const currentError = saveError || createError?.message || updateError?.message;
++
+   return (
+     <Layout headerNav={headerNav}>
+       <h2>{isEditMode ? 'Edit Post' : 'Create New Post'}</h2>
+       
+-      {(error || saveError) && (
++      {currentError && (
+         <div className="alert alert-error" style={{ 
+           backgroundColor: '#ff4444', 
+           color: 'white', 
+@@ -151,7 +146,7 @@ export const EditPost: React.FC = () => {
+           borderRadius: '4px', 
+           marginBottom: '20px' 
+         }}>
+-          {saveError || error}
++          {currentError}
+         </div>
+       )}
+ 
+@@ -167,7 +162,7 @@ export const EditPost: React.FC = () => {
+             onBlur={handleTitleBlur}
+             placeholder="Enter post title"
+             maxLength={200}
+-            disabled={loading || isLoading}
++            disabled={isLoading}
+             style={{
+               outline: isTitleInvalid ? '2px solid #ff4444' : undefined,
+               borderColor: isTitleInvalid ? '#ff4444' : undefined
+@@ -188,7 +183,7 @@ export const EditPost: React.FC = () => {
+             onChange={(e) => setDescription(e.target.value)}
+             placeholder="Enter post description (optional)"
+             maxLength={300}
+-            disabled={loading || isLoading}
++            disabled={isLoading}
+           />
+           <small className="form-text" style={{ color: '#888' }}>
+             {description.length}/300 characters â€¢ Optional excerpt for your post
+@@ -205,7 +200,7 @@ export const EditPost: React.FC = () => {
+             onBlur={handleContentBlur}
+             placeholder="Write your post content here..."
+             maxLength={50000}
+-            disabled={loading || isLoading}
++            disabled={isLoading}
+             rows={12}
+             style={{
+               outline: isContentInvalid ? '2px solid #ff4444' : undefined,
+@@ -227,7 +222,7 @@ export const EditPost: React.FC = () => {
+               name="published"
+               checked={published}
+               onChange={(e) => setPublished(e.target.checked)}
+-              disabled={loading || isLoading}
++              disabled={isLoading}
+             />
+             Publish immediately
+           </label>
+@@ -240,7 +235,7 @@ export const EditPost: React.FC = () => {
+           <button 
+             type="submit" 
+             className="button"
+-            disabled={loading || isLoading || !title.trim() || !content.trim()}
++            disabled={isLoading || !title.trim() || !content.trim()}
+           >
+             {isLoading ? 'Saving...' : (published ? 'Publish' : 'Save Draft')}
+           </button>
+@@ -250,7 +245,7 @@ export const EditPost: React.FC = () => {
+               type="button" 
+               className="button-secondary"
+               onClick={handleSaveDraft}
+-              disabled={loading || isLoading || !title.trim() || !content.trim()}
++              disabled={isLoading || !title.trim() || !content.trim()}
+             >
+               Save as Draft
+             </button>
+diff --git a/src/pages/Home.tsx b/src/pages/Home.tsx
+index e91dfb7..c47d5a5 100644
+--- a/src/pages/Home.tsx
++++ b/src/pages/Home.tsx
+@@ -2,97 +2,109 @@ import React from "react";
+ import { Link, Navigate } from "react-router-dom";
+ import { Layout } from "../components/Layout";
+ import { useAuth } from "../contexts/AuthContext";
++import { usePosts } from '../hooks/usePosts'
++import PostCard from '../components/PostCard'
+ 
+ export const Home: React.FC = () => {
+   const { isAuthenticated, isLoading } = useAuth();
++  const { data, isLoading: postsLoading, error } = usePosts(1, 10)
+ 
+   // Show loading while checking authentication
+   if (isLoading) {
+     return (
+-      <div style={{ 
+-        display: 'flex', 
+-        justifyContent: 'center', 
+-        alignItems: 'center', 
+-        height: '100vh' 
+-      }}>
+-        <div>Loading...</div>
+-      </div>
++      <Layout>
++        <div style={{ textAlign: 'center', padding: '2rem' }}>
++          <p style={{ color: 'var(--text-muted-color)' }}>Loading...</p>
++        </div>
++      </Layout>
+     );
+   }
+ 
+-  // Redirect to dashboard if authenticated
++  // Redirect authenticated users to dashboard
+   if (isAuthenticated) {
+     return <Navigate to="/dashboard" replace />;
+   }
+ 
++  if (postsLoading) {
++    return (
++      <Layout>
++        <div style={{ textAlign: 'center', padding: '2rem' }}>
++          <p style={{ color: 'var(--text-muted-color)' }}>Loading posts...</p>
++        </div>
++      </Layout>
++    )
++  }
++
++  if (error) {
++    return (
++      <Layout>
++        <div style={{ textAlign: 'center', padding: '2rem' }}>
++          <p style={{ color: '#ff4444', marginBottom: '1rem' }}>Error loading posts: {error.message}</p>
++          <button 
++            onClick={() => window.location.reload()} 
++            className="button"
++          >
++            Try Again
++          </button>
++        </div>
++      </Layout>
++    )
++  }
++
++  const posts = data?.posts || []
++
+   const headerNav = (
+     <div className="divide-x">
+-      <Link to="/login" className="text-accent text-decoration-none">
+-        Log in
+-      </Link>
+-      <Link to="/register" className="text-accent text-decoration-none">
+-        Sign up
+-      </Link>
++      <Link to="/login" className="text-accent text-decoration-none">Login</Link>
++      <Link to="/register" className="text-accent text-decoration-none">Register</Link>
+     </div>
+   );
+ 
+   return (
+     <Layout headerTitle="simple-blog-site" headerNav={headerNav}>
+-      <section className="welcome-section">
+-        <h1>Welcome to Simple Blog Site</h1>
+-
+-        <p className="text-muted mb-1">
+-          A simple blogging platform where you can share your thoughts and read
+-          others' stories. {" "}
+-          <span style={{ fontSize: "0.5em" }}>
+-            (totally not a copy of Bear Ê•â€¢á´¥â€¢Ê”)
+-          </span>
++      <section style={{ textAlign: 'center', marginBottom: '3rem' }}>
++        <h1 style={{ fontSize: '2.5rem', fontWeight: 'bold', marginBottom: '1rem' }}>
++          Welcome to BlogApp
++        </h1>
++        <p style={{ fontSize: '1.2rem', color: 'var(--text-muted-color)', marginBottom: '2rem' }}>
++          Discover amazing stories and share your own
+         </p>
++        <Link 
++          to="/register" 
++          className="button"
++          style={{ fontSize: '1.1rem', padding: '0.75rem 2rem' }}
++        >
++          Get Started
++        </Link>
++      </section>
+ 
+-        <div className="mb-2">
+-          <h2>Features</h2>
+-          <ul>
+-            <li>Write and publish blog posts</li>
+-            <li>Read posts from other writers</li>
+-            <li>Simple, clean interface</li>
+-            <li>User profiles and personal blogs</li>
+-          </ul>
+-        </div>
++      <section>
++        <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1.5rem' }}>Latest Posts</h2>
++        
++        {posts.length === 0 ? (
++          <div style={{ textAlign: 'center', padding: '3rem 0' }}>
++            <p style={{ color: 'var(--text-muted-color)', fontSize: '1.1rem' }}>No posts available yet.</p>
++            <p style={{ color: 'var(--text-muted-color)', marginTop: '0.5rem' }}>Be the first to share your story!</p>
++          </div>
++        ) : (
++          <div style={{ display: 'grid', gap: '1.5rem' }}>
++            {posts.map((post) => (
++              <PostCard key={post._id} post={post} />
++            ))}
++          </div>
++        )}
++      </section>
+ 
+-        <div
+-          style={{
+-            textAlign: "center",
+-            padding: "2rem 0",
+-            borderTop: "1px solid var(--border-color)",
+-            marginTop: "2rem",
+-          }}
+-        >
+-          <h3 style={{ marginBottom: "1rem" }}>Ready to get started?</h3>
+-          <div
+-            style={{ display: "flex", gap: "1rem", justifyContent: "center" }}
++      {posts.length > 0 && (
++        <div style={{ textAlign: 'center', marginTop: '2rem' }}>
++          <Link 
++            to="/posts" 
++            className="button-secondary"
+           >
+-            <Link
+-              to="/register"
+-              className="button"
+-              style={{ textDecoration: "none" }}
+-            >
+-              Create Account
+-            </Link>
+-            <Link
+-              to="/login"
+-              className="button"
+-              style={{
+-                textDecoration: "none",
+-                backgroundColor: "transparent",
+-                border: "1px solid var(--primary-accent-color)",
+-                color: "var(--primary-accent-color)",
+-              }}
+-            >
+-              Log In
+-            </Link>
+-          </div>
++            View All Posts
++          </Link>
+         </div>
+-      </section>
++      )}
+     </Layout>
+   );
+ };
+diff --git a/src/pages/Post.tsx b/src/pages/Post.tsx
+index 01ff411..bb1c709 100644
+--- a/src/pages/Post.tsx
++++ b/src/pages/Post.tsx
+@@ -1,34 +1,16 @@
+-import React, { useEffect, useState } from 'react';
++import React, { useState } from 'react';
+ import { Link, useParams, useNavigate } from 'react-router-dom';
+ import { Layout } from '../components/Layout';
+ import { Comment } from '../components/Comment';
+-import { usePostsContext } from '../contexts/PostsContext';
++import { usePost, useDeletePost } from '../hooks/usePosts';
+ import { useAuth } from '../contexts/AuthContext';
+-import type { Post as PostType } from '../types';
+ 
+ export const Post: React.FC = () => {
+   const { id } = useParams<{ id: string }>();
+   const navigate = useNavigate();
+-  const { getPost, deletePost, loading, error, clearError } = usePostsContext();
++  const { data: post, isLoading: loading, error } = usePost(id || '');
++  const { mutate: deletePost, isPending: isDeleting } = useDeletePost();
+   const { user } = useAuth();
+-  const [post, setPost] = useState<PostType | null>(null);
+-  const [isDeleting, setIsDeleting] = useState(false);
+-
+-  // Load post when component mounts
+-  useEffect(() => {
+-    if (id) {
+-      const loadPost = async () => {
+-        const fetchedPost = await getPost(id);
+-        setPost(fetchedPost);
+-      };
+-      loadPost();
+-    }
+-  }, [id, getPost]);
+-
+-  // Clear errors when component mounts
+-  useEffect(() => {
+-    clearError();
+-  }, [clearError]);
+ 
+   const handleDeletePost = async () => {
+     if (!post || !id) return;
+@@ -36,14 +18,7 @@ export const Post: React.FC = () => {
+     const confirmDelete = window.confirm('Are you sure you want to delete this post? This action cannot be undone.');
+     if (!confirmDelete) return;
+ 
+-    setIsDeleting(true);
+-    const success = await deletePost(id);
+-    
+-    if (success) {
+-      navigate('/dashboard');
+-    } else {
+-      setIsDeleting(false);
+-    }
++    deletePost(id);
+   };
+ 
+   const formatDate = (date: Date | string) => {
+@@ -79,7 +54,7 @@ export const Post: React.FC = () => {
+         <div style={{ textAlign: 'center', padding: '2rem' }}>
+           <h2>Post not found</h2>
+           <p style={{ color: 'var(--text-muted-color)', marginBottom: '1rem' }}>
+-            {error || 'The post you\'re looking for doesn\'t exist or has been removed.'}
++            {error?.message || 'The post you\'re looking for doesn\'t exist or has been removed.'}
+           </p>
+           <Link to="/dashboard" className="button">
+             Back to Dashboard
+diff --git a/src/pages/Profile.tsx b/src/pages/Profile.tsx
+index 1833163..0cad708 100644
+--- a/src/pages/Profile.tsx
++++ b/src/pages/Profile.tsx
+@@ -1,28 +1,13 @@
+-import React, { useEffect } from "react";
++import React from "react";
+ import { Link } from "react-router-dom";
+ import { Layout } from "../components/Layout";
+ import { NoPostsMessage } from "../components/NoPostsMessage";
+-import { usePostsContext } from "../contexts/PostsContext";
++import { useMyPosts } from "../hooks/usePosts";
+ import { useAuthContext } from "../contexts/AuthContext";
+ 
+ export const Profile: React.FC = () => {
+-  const { posts, loading, error, getPostsByUser, clearError } = usePostsContext();
+   const { user } = useAuthContext();
+-
+-  // Load user's posts when component mounts
+-  useEffect(() => {
+-    if (user?.username) {
+-      const loadUserPosts = async () => {
+-        await getPostsByUser(user.username);
+-      };
+-      loadUserPosts();
+-    }
+-  }, [user?.username, getPostsByUser]);
+-
+-  // Clear errors when component mounts
+-  useEffect(() => {
+-    clearError();
+-  }, [clearError]);
++  const { data: posts = [], isLoading: loading, error } = useMyPosts();
+ 
+   const formatDate = (date: Date | string) => {
+     const d = typeof date === 'string' ? new Date(date) : date;
+@@ -108,7 +93,7 @@ export const Profile: React.FC = () => {
+             borderRadius: '4px', 
+             marginBottom: '1rem' 
+           }}>
+-            Error loading posts: {error}
++            Error loading posts: {error.message}
+           </div>
+         )}
+         
+diff --git a/src/services/postsApi.ts b/src/services/postsApi.ts
+new file mode 100644
+index 0000000..8867ce8
+--- /dev/null
++++ b/src/services/postsApi.ts
+@@ -0,0 +1,140 @@
++import type { Post, CreatePostRequest, UpdatePostRequest, PostResponse, PostsListResponse } from '../types'
++
++const API_BASE_URL = 'http://localhost:3000/api'
++
++const getAuthHeaders = () => {
++  const token = localStorage.getItem('authToken')
++  return {
++    'Content-Type': 'application/json',
++    ...(token && { Authorization: `Bearer ${token}` })
++  }
++}
++
++// Get all published posts
++export const fetchPosts = async (page: number = 1, limit: number = 10): Promise<{ posts: Post[], total: number }> => {
++  const response = await fetch(`${API_BASE_URL}/posts?page=${page}&limit=${limit}`)
++  const data: PostsListResponse = await response.json()
++  
++  if (!response.ok) {
++    throw new Error(data.message || `HTTP error! status: ${response.status}`)
++  }
++  
++  if (!data.success) {
++    throw new Error(data.message || 'Failed to fetch posts')
++  }
++  
++  return {
++    posts: data.posts || [],
++    total: data.total || 0
++  }
++}
++
++// Get posts by user (public posts only)
++export const fetchPostsByUser = async (username: string): Promise<Post[]> => {
++  const response = await fetch(`${API_BASE_URL}/posts/user/${username}`)
++  const data: PostsListResponse = await response.json()
++  
++  if (!response.ok) {
++    throw new Error(data.message || `HTTP error! status: ${response.status}`)
++  }
++  
++  if (!data.success) {
++    throw new Error(data.message || 'Failed to fetch user posts')
++  }
++  
++  return data.posts || []
++}
++
++// Get all posts by current authenticated user (including drafts)
++export const fetchMyPosts = async (): Promise<Post[]> => {
++  const response = await fetch(`${API_BASE_URL}/posts/my/all`, {
++    headers: getAuthHeaders()
++  })
++  const data: PostsListResponse = await response.json()
++  
++  if (!response.ok) {
++    throw new Error(data.message || `HTTP error! status: ${response.status}`)
++  }
++  
++  if (!data.success) {
++    throw new Error(data.message || 'Failed to fetch your posts')
++  }
++  
++  return data.posts || []
++}
++
++// Get single post by ID
++export const fetchPost = async (postId: string): Promise<Post> => {
++  const response = await fetch(`${API_BASE_URL}/posts/${postId}`)
++  const data: PostResponse = await response.json()
++  
++  if (!response.ok) {
++    throw new Error(data.message || `HTTP error! status: ${response.status}`)
++  }
++  
++  if (!data.success || !data.post) {
++    throw new Error(data.message || 'Post not found')
++  }
++  
++  return data.post
++}
++
++// Create new post
++export const createPost = async (postData: CreatePostRequest): Promise<Post> => {
++  const response = await fetch(`${API_BASE_URL}/posts`, {
++    method: 'POST',
++    headers: getAuthHeaders(),
++    body: JSON.stringify(postData)
++  })
++  
++  const data: PostResponse = await response.json()
++  
++  if (!response.ok) {
++    throw new Error(data.message || `HTTP error! status: ${response.status}`)
++  }
++  
++  if (!data.success || !data.post) {
++    throw new Error(data.message || 'Failed to create post')
++  }
++  
++  return data.post
++}
++
++// Update post
++export const updatePost = async ({ postId, postData }: { postId: string, postData: UpdatePostRequest }): Promise<Post> => {
++  const response = await fetch(`${API_BASE_URL}/posts/${postId}`, {
++    method: 'PUT',
++    headers: getAuthHeaders(),
++    body: JSON.stringify(postData)
++  })
++  
++  const data: PostResponse = await response.json()
++  
++  if (!response.ok) {
++    throw new Error(data.message || `HTTP error! status: ${response.status}`)
++  }
++  
++  if (!data.success || !data.post) {
++    throw new Error(data.message || 'Failed to update post')
++  }
++  
++  return data.post
++}
++
++// Delete post
++export const deletePost = async (postId: string): Promise<void> => {
++  const response = await fetch(`${API_BASE_URL}/posts/${postId}`, {
++    method: 'DELETE',
++    headers: getAuthHeaders()
++  })
++  
++  const data: PostResponse = await response.json()
++  
++  if (!response.ok) {
++    throw new Error(data.message || `HTTP error! status: ${response.status}`)
++  }
++  
++  if (!data.success) {
++    throw new Error(data.message || 'Failed to delete post')
++  }
++} 
+\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index adc1634..109138c 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -8,6 +8,7 @@
       "name": "437-project-vite-app",
       "version": "0.0.0",
       "dependencies": {
+        "@tanstack/react-query": "^5.80.7",
         "@types/react-router-dom": "^5.3.3",
         "react": "^19.1.0",
         "react-dom": "^19.1.0",
@@ -1256,6 +1257,30 @@
         "win32"
       ]
     },
+    "node_modules/@tanstack/query-core": {
+      "version": "5.80.7",
+      "resolved": "https://registry.npmjs.org/@tanstack/query-core/-/query-core-5.80.7.tgz",
+      "integrity": "sha512-s09l5zeUKC8q7DCCCIkVSns8zZrK4ZDT6ryEjxNBFi68G4z2EBobBS7rdOY3r6W1WbUDpc1fe5oY+YO/+2UVUg==",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/tannerlinsley"
+      }
+    },
+    "node_modules/@tanstack/react-query": {
+      "version": "5.80.7",
+      "resolved": "https://registry.npmjs.org/@tanstack/react-query/-/react-query-5.80.7.tgz",
+      "integrity": "sha512-u2F0VK6+anItoEvB3+rfvTO9GEh2vb00Je05OwlUe/A0lkJBgW1HckiY3f9YZa+jx6IOe4dHPh10dyp9aY3iRQ==",
+      "dependencies": {
+        "@tanstack/query-core": "5.80.7"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/tannerlinsley"
+      },
+      "peerDependencies": {
+        "react": "^18 || ^19"
+      }
+    },
     "node_modules/@types/babel__core": {
       "version": "7.20.5",
       "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
diff --git a/package.json b/package.json
index fe9e7f3..493a5fc 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
     "preview": "vite preview"
   },
   "dependencies": {
+    "@tanstack/react-query": "^5.80.7",
     "@types/react-router-dom": "^5.3.3",
     "react": "^19.1.0",
     "react-dom": "^19.1.0",
diff --git a/src/App.tsx b/src/App.tsx
index 76b5b2f..d87d33e 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -4,7 +4,6 @@ import { Home, Profile, Post, Settings, EditPost, Login, Register, Dashboard } f
 import { PostProvider } from './contexts/PostContext';
 import { ProfileProvider, useProfileContext } from './contexts/ProfileContext';
 import { AuthProvider } from './contexts/AuthContext';
-import { PostsProvider } from './contexts/PostsContext';
 import { ProtectedRoute } from './components/ProtectedRoute';
 import './style.css';
 
@@ -18,41 +17,39 @@ function AppContent() {
 
   return (
     <PostProvider>
-      <PostsProvider>
-        <Router>
-          <Routes>
-            <Route path="/" element={<Home />} />
-            <Route path="/login" element={<Login />} />
-            <Route path="/register" element={<Register />} />
-            <Route path="/dashboard" element={
-              <ProtectedRoute>
-                <Dashboard />
-              </ProtectedRoute>
-            } />
-            <Route path="/profile" element={
-              <ProtectedRoute>
-                <Profile />
-              </ProtectedRoute>
-            } />
-            <Route path="/post/:id" element={<Post />} />
-            <Route path="/settings" element={
-              <ProtectedRoute>
-                <Settings />
-              </ProtectedRoute>
-            } />
-            <Route path="/edit-post" element={
-              <ProtectedRoute>
-                <EditPost />
-              </ProtectedRoute>
-            } />
-            <Route path="/edit-post/:postId" element={
-              <ProtectedRoute>
-                <EditPost />
-              </ProtectedRoute>
-            } />
-          </Routes>
-        </Router>
-      </PostsProvider>
+      <Router>
+        <Routes>
+          <Route path="/" element={<Home />} />
+          <Route path="/login" element={<Login />} />
+          <Route path="/register" element={<Register />} />
+          <Route path="/dashboard" element={
+            <ProtectedRoute>
+              <Dashboard />
+            </ProtectedRoute>
+          } />
+          <Route path="/profile" element={
+            <ProtectedRoute>
+              <Profile />
+            </ProtectedRoute>
+          } />
+          <Route path="/post/:id" element={<Post />} />
+          <Route path="/settings" element={
+            <ProtectedRoute>
+              <Settings />
+            </ProtectedRoute>
+          } />
+          <Route path="/edit-post" element={
+            <ProtectedRoute>
+              <EditPost />
+            </ProtectedRoute>
+          } />
+          <Route path="/edit-post/:postId" element={
+            <ProtectedRoute>
+              <EditPost />
+            </ProtectedRoute>
+          } />
+        </Routes>
+      </Router>
     </PostProvider>
   );
 }
diff --git a/src/hooks/usePosts.ts b/src/hooks/usePosts.ts
new file mode 100644
index 0000000..01b3798
--- /dev/null
+++ b/src/hooks/usePosts.ts
@@ -0,0 +1,128 @@
+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
+import { useNavigate } from 'react-router-dom'
+import * as postsApi from '../services/postsApi'
+import type { CreatePostRequest, UpdatePostRequest } from '../types'
+
+// Query keys
+export const postKeys = {
+  all: ['posts'] as const,
+  lists: () => [...postKeys.all, 'list'] as const,
+  list: (filters: string) => [...postKeys.lists(), { filters }] as const,
+  details: () => [...postKeys.all, 'detail'] as const,
+  detail: (id: string) => [...postKeys.details(), id] as const,
+  userPosts: (username: string) => [...postKeys.all, 'user', username] as const,
+}
+
+// Get all posts
+export const usePosts = (page: number = 1, limit: number = 10) => {
+  return useQuery({
+    queryKey: postKeys.list(`page-${page}-limit-${limit}`),
+    queryFn: () => postsApi.fetchPosts(page, limit),
+    staleTime: 2 * 60 * 1000, // 2 minutes
+  })
+}
+
+// Get posts by user (public posts only)
+export const usePostsByUser = (username: string) => {
+  return useQuery({
+    queryKey: postKeys.userPosts(username),
+    queryFn: () => postsApi.fetchPostsByUser(username),
+    enabled: !!username, // Only run if username exists
+    staleTime: 1 * 60 * 1000, // 1 minute
+  })
+}
+
+// Get all posts by current authenticated user (including drafts)
+export const useMyPosts = () => {
+  return useQuery({
+    queryKey: [...postKeys.all, 'my'] as const,
+    queryFn: () => postsApi.fetchMyPosts(),
+    staleTime: 30 * 1000, // 30 seconds (more frequent refresh for user's own posts)
+  })
+}
+
+// Get single post
+export const usePost = (postId: string) => {
+  return useQuery({
+    queryKey: postKeys.detail(postId),
+    queryFn: () => postsApi.fetchPost(postId),
+    enabled: !!postId, // Only run if postId exists
+    retry: 1, // Only retry once for 404s
+  })
+}
+
+// Create post mutation
+export const useCreatePost = () => {
+  const queryClient = useQueryClient()
+  const navigate = useNavigate()
+
+  return useMutation({
+    mutationFn: (postData: CreatePostRequest) => postsApi.createPost(postData),
+    onSuccess: (newPost) => {
+      // Invalidate posts lists to refetch them
+      queryClient.invalidateQueries({ queryKey: postKeys.lists() })
+      queryClient.invalidateQueries({ queryKey: postKeys.userPosts(newPost.author) })
+      queryClient.invalidateQueries({ queryKey: [...postKeys.all, 'my'] })
+      
+      // Add the new post to the cache
+      queryClient.setQueryData(postKeys.detail(newPost._id!), newPost)
+      
+      // Navigate to dashboard
+      navigate('/dashboard')
+    },
+    onError: (error) => {
+      console.error('Error creating post:', error)
+    }
+  })
+}
+
+// Update post mutation
+export const useUpdatePost = () => {
+  const queryClient = useQueryClient()
+  const navigate = useNavigate()
+
+  return useMutation({
+    mutationFn: ({ postId, postData }: { postId: string, postData: UpdatePostRequest }) => 
+      postsApi.updatePost({ postId, postData }),
+    onSuccess: (updatedPost) => {
+      // Update the specific post in cache
+      queryClient.setQueryData(postKeys.detail(updatedPost._id!), updatedPost)
+      
+      // Invalidate lists to refetch them
+      queryClient.invalidateQueries({ queryKey: postKeys.lists() })
+      queryClient.invalidateQueries({ queryKey: postKeys.userPosts(updatedPost.author) })
+      queryClient.invalidateQueries({ queryKey: [...postKeys.all, 'my'] })
+      
+      // Navigate to dashboard
+      navigate('/dashboard')
+    },
+    onError: (error) => {
+      console.error('Error updating post:', error)
+    }
+  })
+}
+
+// Delete post mutation
+export const useDeletePost = () => {
+  const queryClient = useQueryClient()
+  const navigate = useNavigate()
+
+  return useMutation({
+    mutationFn: (postId: string) => postsApi.deletePost(postId),
+    onSuccess: (_, postId) => {
+      // Remove the post from cache
+      queryClient.removeQueries({ queryKey: postKeys.detail(postId) })
+      
+      // Invalidate lists to refetch them
+      queryClient.invalidateQueries({ queryKey: postKeys.lists() })
+      queryClient.invalidateQueries({ queryKey: postKeys.all })
+      queryClient.invalidateQueries({ queryKey: [...postKeys.all, 'my'] })
+      
+      // Navigate to dashboard
+      navigate('/dashboard')
+    },
+    onError: (error) => {
+      console.error('Error deleting post:', error)
+    }
+  })
+} 
\ No newline at end of file
diff --git a/src/main.tsx b/src/main.tsx
index 4aff025..b99f368 100644
--- a/src/main.tsx
+++ b/src/main.tsx
@@ -1,9 +1,23 @@
 import { StrictMode } from 'react'
 import { createRoot } from 'react-dom/client'
+import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
+import './index.css'
 import App from './App.tsx'
 
+// Create a client
+const queryClient = new QueryClient({
+  defaultOptions: {
+    queries: {
+      staleTime: 5 * 60 * 1000, // 5 minutes
+      gcTime: 10 * 60 * 1000, // 10 minutes (was cacheTime)
+    },
+  },
+})
+
 createRoot(document.getElementById('root')!).render(
   <StrictMode>
-    <App />
+    <QueryClientProvider client={queryClient}>
+      <App />
+    </QueryClientProvider>
   </StrictMode>,
 )
diff --git a/src/pages/Dashboard.tsx b/src/pages/Dashboard.tsx
index deb2a84..daff517 100644
--- a/src/pages/Dashboard.tsx
+++ b/src/pages/Dashboard.tsx
@@ -1,29 +1,14 @@
-import React, { useEffect } from 'react';
+import React from 'react';
 import { Link } from 'react-router-dom';
 import { Layout } from '../components/Layout';
 import { NoPostsMessage } from '../components/NoPostsMessage';
-import { usePostsContext } from '../contexts/PostsContext';
+import { useMyPosts } from '../hooks/usePosts';
 import { useAuth } from '../contexts/AuthContext';
 
 export const Dashboard: React.FC = () => {
-  const { posts, loading, error, getPostsByUser, clearError } = usePostsContext();
+  const { data: posts = [], isLoading: loading, error } = useMyPosts();
   const { user, logout } = useAuth();
 
-  // Load user's posts when component mounts
-  useEffect(() => {
-    if (user?.username) {
-      const loadUserPosts = async () => {
-        await getPostsByUser(user.username);
-      };
-      loadUserPosts();
-    }
-  }, [user?.username, getPostsByUser]);
-
-  // Clear errors when component mounts
-  useEffect(() => {
-    clearError();
-  }, [clearError]);
-
   const handleLogout = () => {
     logout();
     // Navigation to home will happen automatically
@@ -98,7 +83,7 @@ export const Dashboard: React.FC = () => {
               borderRadius: '4px', 
               marginBottom: '1rem' 
             }}>
-              Error loading posts: {error}
+              Error loading posts: {error.message}
             </div>
           )}
           
diff --git a/src/pages/EditPost.tsx b/src/pages/EditPost.tsx
index 32bb4da..e03bf96 100644
--- a/src/pages/EditPost.tsx
+++ b/src/pages/EditPost.tsx
@@ -1,7 +1,7 @@
 import React, { useState, useEffect } from 'react';
 import { Link, useNavigate, useParams } from 'react-router-dom';
 import { Layout } from '../components/Layout';
-import { usePostsContext } from '../contexts/PostsContext';
+import { usePost, useCreatePost, useUpdatePost } from '../hooks/usePosts';
 
 export const EditPost: React.FC = () => {
   const [title, setTitle] = useState('');
@@ -10,38 +10,35 @@ export const EditPost: React.FC = () => {
   const [published, setPublished] = useState(true);
   const [titleTouched, setTitleTouched] = useState(false);
   const [contentTouched, setContentTouched] = useState(false);
-  const [isLoading, setIsLoading] = useState(false);
   const [saveError, setSaveError] = useState<string | null>(null);
   
   const navigate = useNavigate();
   const { postId } = useParams<{ postId: string }>();
-  const { createPost, updatePost, getPost, loading, error, clearError } = usePostsContext();
+  
+  // React Query hooks
+  const { data: post, isLoading: postLoading, error: postError } = usePost(postId || '');
+  const { mutate: createPost, isPending: isCreating, error: createError } = useCreatePost();
+  const { mutate: updatePost, isPending: isUpdating, error: updateError } = useUpdatePost();
 
   const isEditMode = Boolean(postId);
+  const isLoading = isCreating || isUpdating;
 
   // Load post data if editing
   useEffect(() => {
-    if (isEditMode && postId) {
-      const loadPost = async () => {
-        const post = await getPost(postId);
-        if (post) {
-          setTitle(post.title);
-          setDescription(post.description || '');
-          setContent(post.content);
-          setPublished(post.published);
-        } else {
-          navigate('/dashboard');
-        }
-      };
-      loadPost();
+    if (isEditMode && post) {
+      setTitle(post.title);
+      setDescription(post.description || '');
+      setContent(post.content);
+      setPublished(post.published);
     }
-  }, [isEditMode, postId, getPost, navigate]);
+  }, [isEditMode, post]);
 
-  // Clear errors when component mounts
+  // Handle navigation if post doesn't exist
   useEffect(() => {
-    clearError();
-    setSaveError(null);
-  }, [clearError]);
+    if (isEditMode && postError && !postLoading) {
+      navigate('/dashboard');
+    }
+  }, [isEditMode, postError, postLoading, navigate]);
 
   const headerNav = (
     <Link to="/dashboard" className="text-accent text-decoration-none">Dashboard</Link>
@@ -72,33 +69,25 @@ export const EditPost: React.FC = () => {
       return;
     }
 
-    setIsLoading(true);
+    const postData = {
+      title: title.trim(),
+      description: description.trim() || undefined,
+      content: content.trim(),
+      published
+    };
 
-    try {
-      const postData = {
-        title: title.trim(),
-        description: description.trim() || undefined,
-        content: content.trim(),
-        published
-      };
-
-      let result;
-      if (isEditMode && postId) {
-        result = await updatePost(postId, postData);
-      } else {
-        result = await createPost(postData);
-      }
-
-      if (result) {
-        // Navigate to dashboard after successful save
-        navigate('/dashboard');
-      } else {
-        setSaveError(error || 'Failed to save post');
-      }
-    } catch {
-      setSaveError('An unexpected error occurred');
-    } finally {
-      setIsLoading(false);
+    if (isEditMode && postId) {
+      updatePost({ postId, postData }, {
+        onError: (error) => {
+          setSaveError(error.message || 'Failed to update post');
+        }
+      });
+    } else {
+      createPost(postData, {
+        onError: (error) => {
+          setSaveError(error.message || 'Failed to create post');
+        }
+      });
     }
   };
 
@@ -110,40 +99,46 @@ export const EditPost: React.FC = () => {
       return;
     }
 
-    setIsLoading(true);
-
-    try {
-      const postData = {
-        title: title.trim(),
-        description: description.trim() || undefined,
-        content: content.trim(),
-        published: false
-      };
-
-      let result;
-      if (isEditMode && postId) {
-        result = await updatePost(postId, { ...postData, published: false });
-      } else {
-        result = await createPost({ ...postData, published: false });
-      }
+    const postData = {
+      title: title.trim(),
+      description: description.trim() || undefined,
+      content: content.trim(),
+      published: false
+    };
 
-      if (result) {
-        navigate('/dashboard');
-      } else {
-        setSaveError(error || 'Failed to save draft');
-      }
-    } catch {
-      setSaveError('An unexpected error occurred');
-    } finally {
-      setIsLoading(false);
+    if (isEditMode && postId) {
+      updatePost({ postId, postData }, {
+        onError: (error) => {
+          setSaveError(error.message || 'Failed to save draft');
+        }
+      });
+    } else {
+      createPost(postData, {
+        onError: (error) => {
+          setSaveError(error.message || 'Failed to save draft');
+        }
+      });
     }
   };
 
+  // Show loading state while fetching post in edit mode
+  if (isEditMode && postLoading) {
+    return (
+      <Layout headerNav={headerNav}>
+        <div style={{ textAlign: 'center', padding: '2rem' }}>
+          <p style={{ color: 'var(--text-muted-color)' }}>Loading post...</p>
+        </div>
+      </Layout>
+    );
+  }
+
+  const currentError = saveError || createError?.message || updateError?.message;
+
   return (
     <Layout headerNav={headerNav}>
       <h2>{isEditMode ? 'Edit Post' : 'Create New Post'}</h2>
       
-      {(error || saveError) && (
+      {currentError && (
         <div className="alert alert-error" style={{ 
           backgroundColor: '#ff4444', 
           color: 'white', 
@@ -151,7 +146,7 @@ export const EditPost: React.FC = () => {
           borderRadius: '4px', 
           marginBottom: '20px' 
         }}>
-          {saveError || error}
+          {currentError}
         </div>
       )}
 
@@ -167,7 +162,7 @@ export const EditPost: React.FC = () => {
             onBlur={handleTitleBlur}
             placeholder="Enter post title"
             maxLength={200}
-            disabled={loading || isLoading}
+            disabled={isLoading}
             style={{
               outline: isTitleInvalid ? '2px solid #ff4444' : undefined,
               borderColor: isTitleInvalid ? '#ff4444' : undefined
@@ -188,7 +183,7 @@ export const EditPost: React.FC = () => {
             onChange={(e) => setDescription(e.target.value)}
             placeholder="Enter post description (optional)"
             maxLength={300}
-            disabled={loading || isLoading}
+            disabled={isLoading}
           />
           <small className="form-text" style={{ color: '#888' }}>
             {description.length}/300 characters â€¢ Optional excerpt for your post
@@ -205,7 +200,7 @@ export const EditPost: React.FC = () => {
             onBlur={handleContentBlur}
             placeholder="Write your post content here..."
             maxLength={50000}
-            disabled={loading || isLoading}
+            disabled={isLoading}
             rows={12}
             style={{
               outline: isContentInvalid ? '2px solid #ff4444' : undefined,
@@ -227,7 +222,7 @@ export const EditPost: React.FC = () => {
               name="published"
               checked={published}
               onChange={(e) => setPublished(e.target.checked)}
-              disabled={loading || isLoading}
+              disabled={isLoading}
             />
             Publish immediately
           </label>
@@ -240,7 +235,7 @@ export const EditPost: React.FC = () => {
           <button 
             type="submit" 
             className="button"
-            disabled={loading || isLoading || !title.trim() || !content.trim()}
+            disabled={isLoading || !title.trim() || !content.trim()}
           >
             {isLoading ? 'Saving...' : (published ? 'Publish' : 'Save Draft')}
           </button>
@@ -250,7 +245,7 @@ export const EditPost: React.FC = () => {
               type="button" 
               className="button-secondary"
               onClick={handleSaveDraft}
-              disabled={loading || isLoading || !title.trim() || !content.trim()}
+              disabled={isLoading || !title.trim() || !content.trim()}
             >
               Save as Draft
             </button>
diff --git a/src/pages/Home.tsx b/src/pages/Home.tsx
index e91dfb7..2918953 100644
--- a/src/pages/Home.tsx
+++ b/src/pages/Home.tsx
@@ -2,9 +2,11 @@ import React from "react";
 import { Link, Navigate } from "react-router-dom";
 import { Layout } from "../components/Layout";
 import { useAuth } from "../contexts/AuthContext";
+import { usePosts } from '../hooks/usePosts';
 
 export const Home: React.FC = () => {
   const { isAuthenticated, isLoading } = useAuth();
+  const { data, isLoading: postsLoading } = usePosts(1, 5);
 
   // Show loading while checking authentication
   if (isLoading) {
@@ -25,6 +27,8 @@ export const Home: React.FC = () => {
     return <Navigate to="/dashboard" replace />;
   }
 
+  const posts = data?.posts || [];
+
   const headerNav = (
     <div className="divide-x">
       <Link to="/login" className="text-accent text-decoration-none">
@@ -59,6 +63,32 @@ export const Home: React.FC = () => {
           </ul>
         </div>
 
+        {/* Recent Posts Section */}
+        {!postsLoading && posts.length > 0 && (
+          <div className="mb-2">
+            <h2>Recent Posts</h2>
+            {posts.slice(0, 3).map(post => (
+              <div key={post._id} className="post-summary">
+                <h3 style={{ marginBottom: '0.5rem' }}>
+                  <Link to={`/post/${post._id}`} className="text-accent text-decoration-none">
+                    {post.title}
+                  </Link>
+                </h3>
+                <p style={{ 
+                  color: 'var(--text-muted-color)', 
+                  fontSize: '0.9rem',
+                  marginBottom: '0.5rem'
+                }}>
+                  By {post.author} â€¢ {new Date(post.createdAt).toLocaleDateString()}
+                </p>
+                <p>
+                  {post.description || (post.content.length > 150 ? post.content.substring(0, 150) + '...' : post.content)}
+                </p>
+              </div>
+            ))}
+          </div>
+        )}
+
         <div
           style={{
             textAlign: "center",
diff --git a/src/pages/Post.tsx b/src/pages/Post.tsx
index 01ff411..db4341a 100644
--- a/src/pages/Post.tsx
+++ b/src/pages/Post.tsx
@@ -1,34 +1,16 @@
-import React, { useEffect, useState } from 'react';
+import React from 'react';
 import { Link, useParams, useNavigate } from 'react-router-dom';
 import { Layout } from '../components/Layout';
 import { Comment } from '../components/Comment';
-import { usePostsContext } from '../contexts/PostsContext';
+import { usePost, useDeletePost } from '../hooks/usePosts';
 import { useAuth } from '../contexts/AuthContext';
-import type { Post as PostType } from '../types';
 
 export const Post: React.FC = () => {
   const { id } = useParams<{ id: string }>();
   const navigate = useNavigate();
-  const { getPost, deletePost, loading, error, clearError } = usePostsContext();
+  const { data: post, isLoading: loading, error } = usePost(id || '');
+  const { mutate: deletePost, isPending: isDeleting } = useDeletePost();
   const { user } = useAuth();
-  const [post, setPost] = useState<PostType | null>(null);
-  const [isDeleting, setIsDeleting] = useState(false);
-
-  // Load post when component mounts
-  useEffect(() => {
-    if (id) {
-      const loadPost = async () => {
-        const fetchedPost = await getPost(id);
-        setPost(fetchedPost);
-      };
-      loadPost();
-    }
-  }, [id, getPost]);
-
-  // Clear errors when component mounts
-  useEffect(() => {
-    clearError();
-  }, [clearError]);
 
   const handleDeletePost = async () => {
     if (!post || !id) return;
@@ -36,14 +18,7 @@ export const Post: React.FC = () => {
     const confirmDelete = window.confirm('Are you sure you want to delete this post? This action cannot be undone.');
     if (!confirmDelete) return;
 
-    setIsDeleting(true);
-    const success = await deletePost(id);
-    
-    if (success) {
-      navigate('/dashboard');
-    } else {
-      setIsDeleting(false);
-    }
+    deletePost(id);
   };
 
   const formatDate = (date: Date | string) => {
@@ -79,7 +54,7 @@ export const Post: React.FC = () => {
         <div style={{ textAlign: 'center', padding: '2rem' }}>
           <h2>Post not found</h2>
           <p style={{ color: 'var(--text-muted-color)', marginBottom: '1rem' }}>
-            {error || 'The post you\'re looking for doesn\'t exist or has been removed.'}
+            {error?.message || 'The post you\'re looking for doesn\'t exist or has been removed.'}
           </p>
           <Link to="/dashboard" className="button">
             Back to Dashboard
diff --git a/src/pages/Profile.tsx b/src/pages/Profile.tsx
index 1833163..f61debc 100644
--- a/src/pages/Profile.tsx
+++ b/src/pages/Profile.tsx
@@ -1,29 +1,14 @@
-import React, { useEffect } from "react";
+import React from "react";
 import { Link } from "react-router-dom";
 import { Layout } from "../components/Layout";
 import { NoPostsMessage } from "../components/NoPostsMessage";
-import { usePostsContext } from "../contexts/PostsContext";
+import { useMyPosts } from "../hooks/usePosts";
 import { useAuthContext } from "../contexts/AuthContext";
 
 export const Profile: React.FC = () => {
-  const { posts, loading, error, getPostsByUser, clearError } = usePostsContext();
+  const { data: posts = [], isLoading: loading, error } = useMyPosts();
   const { user } = useAuthContext();
 
-  // Load user's posts when component mounts
-  useEffect(() => {
-    if (user?.username) {
-      const loadUserPosts = async () => {
-        await getPostsByUser(user.username);
-      };
-      loadUserPosts();
-    }
-  }, [user?.username, getPostsByUser]);
-
-  // Clear errors when component mounts
-  useEffect(() => {
-    clearError();
-  }, [clearError]);
-
   const formatDate = (date: Date | string) => {
     const d = typeof date === 'string' ? new Date(date) : date;
     return d.toLocaleDateString('en-US', { 
@@ -108,7 +93,7 @@ export const Profile: React.FC = () => {
             borderRadius: '4px', 
             marginBottom: '1rem' 
           }}>
-            Error loading posts: {error}
+            Error loading posts: {error.message}
           </div>
         )}
         
diff --git a/src/services/postsApi.ts b/src/services/postsApi.ts
new file mode 100644
index 0000000..8867ce8
--- /dev/null
+++ b/src/services/postsApi.ts
@@ -0,0 +1,140 @@
+import type { Post, CreatePostRequest, UpdatePostRequest, PostResponse, PostsListResponse } from '../types'
+
+const API_BASE_URL = 'http://localhost:3000/api'
+
+const getAuthHeaders = () => {
+  const token = localStorage.getItem('authToken')
+  return {
+    'Content-Type': 'application/json',
+    ...(token && { Authorization: `Bearer ${token}` })
+  }
+}
+
+// Get all published posts
+export const fetchPosts = async (page: number = 1, limit: number = 10): Promise<{ posts: Post[], total: number }> => {
+  const response = await fetch(`${API_BASE_URL}/posts?page=${page}&limit=${limit}`)
+  const data: PostsListResponse = await response.json()
+  
+  if (!response.ok) {
+    throw new Error(data.message || `HTTP error! status: ${response.status}`)
+  }
+  
+  if (!data.success) {
+    throw new Error(data.message || 'Failed to fetch posts')
+  }
+  
+  return {
+    posts: data.posts || [],
+    total: data.total || 0
+  }
+}
+
+// Get posts by user (public posts only)
+export const fetchPostsByUser = async (username: string): Promise<Post[]> => {
+  const response = await fetch(`${API_BASE_URL}/posts/user/${username}`)
+  const data: PostsListResponse = await response.json()
+  
+  if (!response.ok) {
+    throw new Error(data.message || `HTTP error! status: ${response.status}`)
+  }
+  
+  if (!data.success) {
+    throw new Error(data.message || 'Failed to fetch user posts')
+  }
+  
+  return data.posts || []
+}
+
+// Get all posts by current authenticated user (including drafts)
+export const fetchMyPosts = async (): Promise<Post[]> => {
+  const response = await fetch(`${API_BASE_URL}/posts/my/all`, {
+    headers: getAuthHeaders()
+  })
+  const data: PostsListResponse = await response.json()
+  
+  if (!response.ok) {
+    throw new Error(data.message || `HTTP error! status: ${response.status}`)
+  }
+  
+  if (!data.success) {
+    throw new Error(data.message || 'Failed to fetch your posts')
+  }
+  
+  return data.posts || []
+}
+
+// Get single post by ID
+export const fetchPost = async (postId: string): Promise<Post> => {
+  const response = await fetch(`${API_BASE_URL}/posts/${postId}`)
+  const data: PostResponse = await response.json()
+  
+  if (!response.ok) {
+    throw new Error(data.message || `HTTP error! status: ${response.status}`)
+  }
+  
+  if (!data.success || !data.post) {
+    throw new Error(data.message || 'Post not found')
+  }
+  
+  return data.post
+}
+
+// Create new post
+export const createPost = async (postData: CreatePostRequest): Promise<Post> => {
+  const response = await fetch(`${API_BASE_URL}/posts`, {
+    method: 'POST',
+    headers: getAuthHeaders(),
+    body: JSON.stringify(postData)
+  })
+  
+  const data: PostResponse = await response.json()
+  
+  if (!response.ok) {
+    throw new Error(data.message || `HTTP error! status: ${response.status}`)
+  }
+  
+  if (!data.success || !data.post) {
+    throw new Error(data.message || 'Failed to create post')
+  }
+  
+  return data.post
+}
+
+// Update post
+export const updatePost = async ({ postId, postData }: { postId: string, postData: UpdatePostRequest }): Promise<Post> => {
+  const response = await fetch(`${API_BASE_URL}/posts/${postId}`, {
+    method: 'PUT',
+    headers: getAuthHeaders(),
+    body: JSON.stringify(postData)
+  })
+  
+  const data: PostResponse = await response.json()
+  
+  if (!response.ok) {
+    throw new Error(data.message || `HTTP error! status: ${response.status}`)
+  }
+  
+  if (!data.success || !data.post) {
+    throw new Error(data.message || 'Failed to update post')
+  }
+  
+  return data.post
+}
+
+// Delete post
+export const deletePost = async (postId: string): Promise<void> => {
+  const response = await fetch(`${API_BASE_URL}/posts/${postId}`, {
+    method: 'DELETE',
+    headers: getAuthHeaders()
+  })
+  
+  const data: PostResponse = await response.json()
+  
+  if (!response.ok) {
+    throw new Error(data.message || `HTTP error! status: ${response.status}`)
+  }
+  
+  if (!data.success) {
+    throw new Error(data.message || 'Failed to delete post')
+  }
+} 
\ No newline at end of file
